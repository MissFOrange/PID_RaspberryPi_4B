import RPi.GPIO as GPIO
import time
import matplotlib.pyplot as plt
import numpy as np

GPIO.setmode(GPIO.BCM)
#Setting up the GPIO pins
IN1_pin = 4
IN2_pin = 21
GPIO.setup(IN1_pin, GPIO.IN)
GPIO.setup(IN2_pin, GPIO.IN)

#initialize the encodrer state
counter1=0
counter2=0
IN1_state= GPIO.input(IN1_pin)
IN2_state= GPIO.input(IN2_pin)

#Define the callback function
def on_encoder1(channel1):
    global counter1
    counter1+=1
    
def on_encoder2(channel2):
    global counter2
    counter2+=1
    
GPIO.add_event_detect(IN1_pin, GPIO.RISING, callback=on_encoder1)
GPIO.add_event_detect(IN2_pin, GPIO.RISING, callback=on_encoder2)

class Motor():
    def __init__(self, EnA, In1, In2):
        self.EnA= EnA
        self.In1= In1
        self.In2= In2
        GPIO.setup(self.EnA, GPIO.OUT)
        GPIO.setup(self.In1, GPIO.OUT)
        GPIO.setup(self.In2, GPIO.OUT)
        self.pwm= GPIO.PWM(EnA, 100)
        self.pwm.start(0)
    
    def moveF(self, x=50, t=0):
        GPIO.output(self.In1, GPIO.HIGH)
        GPIO.output(self.In2, GPIO.LOW)
        self.pwm.ChangeDutyCycle(x)
        time.sleep(t)
    
    def moveB(self, x=50, t=0):
        GPIO.output(self.In1, GPIO.LOW)
        GPIO.output(self.In2, GPIO.HIGH)
        self.pwm.ChangeDutyCycle(x)
        time.sleep(t)
    
    def stop(self, t=0):
        self.pwm.ChangeDutyCycle(0)
        time.sleep(t)

#Setting up the PID gains
kp=6
ki=2
kd=0
dt=0.1

inte1=inte2=0
preve1=preve2=0

V_max =6
RPM1_t=[]
RPM2_t=[]

M1= Motor(13, 19, 26)
M2= Motor(18, 16, 20)

RPM1_d= RPM2_d= 600

OUT1=OUT2=0

duty_cycle1=duty_cycle2=0

def PID_control1(RPM_d, RPM, kp, ki, kd):
    global inte1, preve1
    
    e= RPM_d-RPM
    e_r=e/60
    inte1+=e_r*dt
    deve=(e_r-preve1)/dt
    
    output= kp*e_r + ki*inte1 + kd*deve
    
    preve1=deve
    
    if output <0:
        output= max(-6,output)
    if output >0:
        output= min(6,output)
    
    return output

def PID_control2(RPM_d, RPM, kp, ki, kd):
    global inte2, preve2
    
    e= RPM_d-RPM
    e_r=e/60
    inte2+=e_r*dt
    deve=(e_r-preve2)/dt
    
    output= kp*e_r + ki*inte2 + kd*deve
    
    preve2=deve
    
    if output <0:
        output= max(-6,output)
    if output >0:
        output= min(6,output)
        
    return output

def calcul_RPM1():
    global counter1, RPM1_t
    dt1=0
    prev_time=time.time()
    while dt1 < 1:
        dt1= time.time()-prev_time
    RPM1= counter1/20*60
    RPM1_t.append(RPM1)
    prev_time=time.time()  
    counter1 =0
    return RPM1

def calcul_RPM2():
    global counter2, RPM2_t
    dt2=0
    prev_time=time.time()
    while dt2 < 1:
        dt2= time.time()-prev_time
    RPM2= counter2/20*60
    RPM2_t.append(RPM2)
    prev_time=time.time()  
    counter2 =0
    return RPM2

def Motor_drive1(output):
    global duty_cycle1
    duty_cycle1= min(100,abs(output)/V_max*100)
    if output > 0:
        M1.moveF(duty_cycle1)
    if output< 0:
        M1.moveB(duty_cycle1)
        
        
def Motor_drive2(output):
    global duty_cycle2
    duty_cycle2= min(100,abs(output)/V_max*100)
    if output > 0:
        M2.moveF(duty_cycle2)
    if output < 0:
        M2.moveB(duty_cycle2)
        
#Defining the motor functions
i=0
OUT1_t=[]
OUT2_t=[]
try:
    while i<25:
        RPM1 =  calcul_RPM1()
        RPM2 =  calcul_RPM2()
        
        OUT1= PID_control1(RPM1_d,RPM1, kp, ki, kd)
        OUT2= PID_control2(RPM2_d,RPM2, kp, ki, kd)
        
        OUT1_t.append(OUT1)
        OUT2_t.append(OUT2)
        
        Motor_drive1(OUT1)
        Motor_drive2(OUT2)
        
        #duty_cycle= max(0,min(100,abs(OUT)/V_max*100))
       # M.pwm.ChangeDutyCycle(duty_cycle)
        print("{:<5} {:<5} {:<5} {:<5} {:<5} {:<5}".format(duty_cycle1, RPM1,OUT1, duty_cycle2, RPM2,OUT2))
        
        time.sleep(dt)
        i+=1
       
    
finally:
    #plt.subplot(121)
    #plt.subplot(122)
    #plt.ylabel('OUT')
    #plt.plot(OUT_t)
    
    M1.stop()
    M2.stop()
    GPIO.cleanup()
    
    plt.subplot(121)
    plt.plot( RPM1_t)
    plt.subplot(122)
    plt.plot( RPM2_t)   
    plt.show()
        
