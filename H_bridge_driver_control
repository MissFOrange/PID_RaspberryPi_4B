import RPi.GPIO as GPIO
import time


GPIO.setwarnings(False)

GPIO.setmode(GPIO.BCM)

class Motor():
    def __init__(self, EnA, In1, In2):
        self.EnA= EnA
        self.In1= In1
        self.In2= In2
        GPIO.setup(self.EnA, GPIO.OUT)
        GPIO.setup(self.In1, GPIO.OUT)
        GPIO.setup(self.In2, GPIO.OUT)
        self.pwm= GPIO.PWM(EnA, 100)
        self.pwm.start(0)
    
    def moveF(self, x=50, t=0):
        GPIO.output(self.In1, GPIO.HIGH)
        GPIO.output(self.In2, GPIO.LOW)
        self.pwm.ChangeDutyCycle(x)
        time.sleep(t)
    
    def moveB(self, x=50, t=0):
        GPIO.output(self.In1, GPIO.LOW)
        GPIO.output(self.In2, GPIO.HIGH)
        self.pwm.ChangeDutyCycle(x)
        time.sleep(t)
    
    def stop(self, t=0):
        self.pwm.ChangeDutyCycle(0)
        time.sleep(t)
    

#Setting up the GPIO pins
IN_pin = 23
GPIO.setup(IN_pin, GPIO.IN)

#initialize the encodrer state
counter=0
IN_state= GPIO.input(IN_pin)

#Define the callback function
def on_encoder(channel):
    global counter
    counter+=1
    
GPIO.add_event_detect(IN_pin, GPIO.RISING, callback=on_encoder)

#Defining the motor functions
M= Motor(13, 19, 26)
RPM_t=[]
i=0

def calcul_RPM():
    global counter, RPM_t
    dt1=0
    prev_time=time.time()
    while dt1 < 1:
        dt1= time.time()-prev_time
    RPM= counter/20*60
    RPM_t.append(RPM)
    prev_time=time.time()  
    print(RPM)
    counter =0
    return RPM
try:
    
    while i<12:
        
        M.moveF(100)
        RPM =  calcul_RPM() 
        i+=1    
finally:
    M.stop()
    GPIO.cleanup()
